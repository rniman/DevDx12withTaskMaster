<context>
# Overview  
DirectX 12(DX12)를 활용하여 윈도우 환경에서 삼각형을 그리는 예제 애플리케이션을 개발합니다. 이 프로젝트는 DX12의 기본 렌더링 파이프라인을 이해하고, 최소한의 코드로 삼각형을 화면에 출력하는 것을 목표로 합니다. 주로 DX12 입문자, 그래픽스 프로그래밍 학습자, 관련 강의/워크숍 자료로 활용될 수 있습니다.

# Core Features  
- DX12 초기화 및 윈도우 생성
  - DX12 디바이스, 커맨드 큐, 스왑체인 등 필수 객체 생성
  - 윈도우(Win32 API) 생성 및 메시지 루프 구현
- 렌더 타겟 및 뷰포트 설정
  - 렌더 타겟 뷰(RTV) 생성 및 바인딩
  - 뷰포트/시저 렉트 설정
- 삼각형 렌더링
  - 정점 버퍼 생성 및 업로드
  - 간단한 셰이더(HLSL) 작성 및 컴파일
  - 파이프라인 상태 객체(PSO) 구성
  - 커맨드 리스트를 통한 드로우 호출
- 프레임 동기화 및 화면 출력
  - Fence를 이용한 GPU/CPU 동기화
  - 스왑체인 Present 호출

# User Experience  
- 사용자: DX12 입문자, 그래픽스 프로그래밍 학습자
- 주요 플로우: 프로그램 실행 → 윈도우 생성 → 삼각형이 화면에 출력됨
- UI/UX: 별도의 UI 없음, 단순히 삼각형이 중앙에 출력됨
</context>
<PRD>
# Technical Architecture  
- Win32 API 기반 윈도우 생성
- DX12 디바이스 및 렌더링 파이프라인 초기화
- 정점 버퍼 및 셰이더(HLSL) 리소스 관리
- 커맨드 큐/리스트, 스왑체인, RTV 등 DX12 핵심 객체 관리

# Development Roadmap  
- 1단계: 프로젝트 구조 및 빌드 환경 설정
- 2단계: 윈도우 생성 및 DX12 초기화
- 3단계: 렌더 타겟/뷰포트 설정
- 4단계: 정점 버퍼/셰이더 작성 및 삼각형 렌더링
- 5단계: 프레임 동기화 및 화면 출력
- 6단계: 코드 정리 및 주석 추가

# Logical Dependency Chain
- 1 → 2 → 3 → 4 → 5 → 6 순서로 진행
- 각 단계는 이전 단계가 완료되어야 다음 단계로 진행 가능

# Risks and Mitigations  
- DX12 API의 복잡성: 공식 문서 및 샘플 코드 참고, 최소 단위로 구현
- 윈도우/드라이버 호환성: 최신 Windows 10/11 환경 기준, 예외 처리 추가
- 빌드 환경 문제: Visual Studio 최신 버전 및 DX12 SDK 사용 권장

# Appendix  
- 참고 자료: Microsoft 공식 DX12 튜토리얼, DirectX-Graphics-Samples
- HLSL 기본 예제 코드 포함 예정
</PRD> 